# Generated by Django 5.2 on 2025-05-25 19:10

import django.db.models.deletion
import lessons.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PeriodLock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grading_period', models.CharField(choices=[('prelim', 'Prelim'), ('midterm', 'Midterm'), ('prefinal', 'Prefinal'), ('final', 'Final')], max_length=10, unique=True)),
                ('locked', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grading_period', models.CharField(choices=[('prelim', 'Prelim'), ('midterm', 'Midterm'), ('prefinal', 'Prefinal'), ('final', 'Final')], default='prelim', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField(help_text='Lesson description')),
                ('file', models.FileField(upload_to=lessons.models.lesson_file_path)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='lesson_thumbnails/')),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('is_archived', models.BooleanField(default=False)),
                ('html_content', models.TextField(blank=True, help_text='Auto-generated HTML from .docx if available', null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-upload_date'],
            },
        ),
        migrations.CreateModel(
            name='LessonAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('view', 'Viewed'), ('download', 'Downloaded')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('grading_period', models.CharField(blank=True, choices=[('prelim', 'Prelim'), ('midterm', 'Midterm'), ('prefinal', 'Prefinal'), ('final', 'Final')], help_text='Cached grading period for filtering dashboard views', max_length=10, null=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('last_viewed', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lessons.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Lesson Progress',
                'unique_together': {('user', 'lesson')},
            },
        ),
    ]
